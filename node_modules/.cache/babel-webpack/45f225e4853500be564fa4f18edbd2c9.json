{"ast":null,"code":"import _get from \"C:/Users/AdMin/Desktop/frontend/pferouandi/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/AdMin/Desktop/frontend/pferouandi/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/AdMin/Desktop/frontend/pferouandi/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/AdMin/Desktop/frontend/pferouandi/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/AdMin/Desktop/frontend/pferouandi/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/AdMin/Desktop/frontend/pferouandi/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function bufferWhen(closingSelector) {\n  return function (source) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nvar BufferWhenOperator = /*#__PURE__*/function () {\n  function BufferWhenOperator(closingSelector) {\n    _classCallCheck(this, BufferWhenOperator);\n\n    this.closingSelector = closingSelector;\n  }\n\n  _createClass(BufferWhenOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    }\n  }]);\n\n  return BufferWhenOperator;\n}();\n\nvar BufferWhenSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(BufferWhenSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(BufferWhenSubscriber);\n\n  function BufferWhenSubscriber(destination, closingSelector) {\n    var _this;\n\n    _classCallCheck(this, BufferWhenSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.closingSelector = closingSelector;\n    _this.subscribing = false;\n\n    _this.openBuffer();\n\n    return _this;\n  }\n\n  _createClass(BufferWhenSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      this.buffer.push(value);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var buffer = this.buffer;\n\n      if (buffer) {\n        this.destination.next(buffer);\n      }\n\n      _get(_getPrototypeOf(BufferWhenSubscriber.prototype), \"_complete\", this).call(this);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      this.buffer = null;\n      this.subscribing = false;\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      this.openBuffer();\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      if (this.subscribing) {\n        this.complete();\n      } else {\n        this.openBuffer();\n      }\n    }\n  }, {\n    key: \"openBuffer\",\n    value: function openBuffer() {\n      var closingSubscription = this.closingSubscription;\n\n      if (closingSubscription) {\n        this.remove(closingSubscription);\n        closingSubscription.unsubscribe();\n      }\n\n      var buffer = this.buffer;\n\n      if (this.buffer) {\n        this.destination.next(buffer);\n      }\n\n      this.buffer = [];\n      var closingNotifier;\n\n      try {\n        var closingSelector = this.closingSelector;\n        closingNotifier = closingSelector();\n      } catch (err) {\n        return this.error(err);\n      }\n\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }]);\n\n  return BufferWhenSubscriber;\n}(OuterSubscriber); //# sourceMappingURL=bufferWhen.js.map","map":{"version":3,"sources":["C:/Users/AdMin/Desktop/frontend/pferouandi/node_modules/rxjs/_esm2015/internal/operators/bufferWhen.js"],"names":["Subscription","OuterSubscriber","subscribeToResult","bufferWhen","closingSelector","source","lift","BufferWhenOperator","subscriber","subscribe","BufferWhenSubscriber","destination","subscribing","openBuffer","value","buffer","push","next","outerValue","innerValue","outerIndex","innerIndex","innerSub","complete","closingSubscription","remove","unsubscribe","closingNotifier","err","error","add"],"mappings":";;;;;;AAAA,SAAQA,YAAR,QAA2B,iBAA3B;AACA,SAAQC,eAAR,QAA8B,oBAA9B;AACA,SAAQC,iBAAR,QAAgC,2BAAhC;AAEA,OAAO,SAASC,UAAT,CAAoBC,eAApB,EAAqC;AACxC,SAAO,UAAUC,MAAV,EAAkB;AACrB,WAAOA,MAAM,CAACC,IAAP,CAAY,IAAIC,kBAAJ,CAAuBH,eAAvB,CAAZ,CAAP;AACH,GAFD;AAGH;;IAEKG,kB;AACF,8BAAYH,eAAZ,EAA6B;AAAA;;AACzB,SAAKA,eAAL,GAAuBA,eAAvB;AACH;;;;WAED,cAAKI,UAAL,EAAiBH,MAAjB,EAAyB;AACrB,aAAOA,MAAM,CAACI,SAAP,CAAiB,IAAIC,oBAAJ,CAAyBF,UAAzB,EAAqC,KAAKJ,eAA1C,CAAjB,CAAP;AACH;;;;;;IAGCM,oB;;;;;AACF,gCAAYC,WAAZ,EAAyBP,eAAzB,EAA0C;AAAA;;AAAA;;AACtC,8BAAMO,WAAN;AACA,UAAKP,eAAL,GAAuBA,eAAvB;AACA,UAAKQ,WAAL,GAAmB,KAAnB;;AACA,UAAKC,UAAL;;AAJsC;AAKzC;;;;WAED,eAAMC,KAAN,EAAa;AACT,WAAKC,MAAL,CAAYC,IAAZ,CAAiBF,KAAjB;AACH;;;WAED,qBAAY;AACR,UAAMC,MAAM,GAAG,KAAKA,MAApB;;AACA,UAAIA,MAAJ,EAAY;AACR,aAAKJ,WAAL,CAAiBM,IAAjB,CAAsBF,MAAtB;AACH;;AACD;AACH;;;WAED,wBAAe;AACX,WAAKA,MAAL,GAAc,IAAd;AACA,WAAKH,WAAL,GAAmB,KAAnB;AACH;;;WAED,oBAAWM,UAAX,EAAuBC,UAAvB,EAAmCC,UAAnC,EAA+CC,UAA/C,EAA2DC,QAA3D,EAAqE;AACjE,WAAKT,UAAL;AACH;;;WAED,0BAAiB;AACb,UAAI,KAAKD,WAAT,EAAsB;AAClB,aAAKW,QAAL;AACH,OAFD,MAEO;AACH,aAAKV,UAAL;AACH;AACJ;;;WAED,sBAAa;AACT,UAAKW,mBAAL,GAA4B,IAA5B,CAAKA,mBAAL;;AACA,UAAIA,mBAAJ,EAAyB;AACrB,aAAKC,MAAL,CAAYD,mBAAZ;AACAA,QAAAA,mBAAmB,CAACE,WAApB;AACH;;AACD,UAAMX,MAAM,GAAG,KAAKA,MAApB;;AACA,UAAI,KAAKA,MAAT,EAAiB;AACb,aAAKJ,WAAL,CAAiBM,IAAjB,CAAsBF,MAAtB;AACH;;AACD,WAAKA,MAAL,GAAc,EAAd;AACA,UAAIY,eAAJ;;AACA,UAAI;AACA,YAAOvB,eAAP,GAA0B,IAA1B,CAAOA,eAAP;AACAuB,QAAAA,eAAe,GAAGvB,eAAe,EAAjC;AACH,OAHD,CAGE,OAAOwB,GAAP,EAAY;AACV,eAAO,KAAKC,KAAL,CAAWD,GAAX,CAAP;AACH;;AACDJ,MAAAA,mBAAmB,GAAG,IAAIxB,YAAJ,EAAtB;AACA,WAAKwB,mBAAL,GAA2BA,mBAA3B;AACA,WAAKM,GAAL,CAASN,mBAAT;AACA,WAAKZ,WAAL,GAAmB,IAAnB;AACAY,MAAAA,mBAAmB,CAACM,GAApB,CAAwB5B,iBAAiB,CAAC,IAAD,EAAOyB,eAAP,CAAzC;AACA,WAAKf,WAAL,GAAmB,KAAnB;AACH;;;;EA7D8BX,e,GAgEnC","sourcesContent":["import {Subscription} from '../Subscription';\r\nimport {OuterSubscriber} from '../OuterSubscriber';\r\nimport {subscribeToResult} from '../util/subscribeToResult';\r\n\r\nexport function bufferWhen(closingSelector) {\r\n    return function (source) {\r\n        return source.lift(new BufferWhenOperator(closingSelector));\r\n    };\r\n}\r\n\r\nclass BufferWhenOperator {\r\n    constructor(closingSelector) {\r\n        this.closingSelector = closingSelector;\r\n    }\r\n\r\n    call(subscriber, source) {\r\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\r\n    }\r\n}\r\n\r\nclass BufferWhenSubscriber extends OuterSubscriber {\r\n    constructor(destination, closingSelector) {\r\n        super(destination);\r\n        this.closingSelector = closingSelector;\r\n        this.subscribing = false;\r\n        this.openBuffer();\r\n    }\r\n\r\n    _next(value) {\r\n        this.buffer.push(value);\r\n    }\r\n\r\n    _complete() {\r\n        const buffer = this.buffer;\r\n        if (buffer) {\r\n            this.destination.next(buffer);\r\n        }\r\n        super._complete();\r\n    }\r\n\r\n    _unsubscribe() {\r\n        this.buffer = null;\r\n        this.subscribing = false;\r\n    }\r\n\r\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        this.openBuffer();\r\n    }\r\n\r\n    notifyComplete() {\r\n        if (this.subscribing) {\r\n            this.complete();\r\n        } else {\r\n            this.openBuffer();\r\n        }\r\n    }\r\n\r\n    openBuffer() {\r\n        let {closingSubscription} = this;\r\n        if (closingSubscription) {\r\n            this.remove(closingSubscription);\r\n            closingSubscription.unsubscribe();\r\n        }\r\n        const buffer = this.buffer;\r\n        if (this.buffer) {\r\n            this.destination.next(buffer);\r\n        }\r\n        this.buffer = [];\r\n        let closingNotifier;\r\n        try {\r\n            const {closingSelector} = this;\r\n            closingNotifier = closingSelector();\r\n        } catch (err) {\r\n            return this.error(err);\r\n        }\r\n        closingSubscription = new Subscription();\r\n        this.closingSubscription = closingSubscription;\r\n        this.add(closingSubscription);\r\n        this.subscribing = true;\r\n        closingSubscription.add(subscribeToResult(this, closingNotifier));\r\n        this.subscribing = false;\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=bufferWhen.js.map\r\n"]},"metadata":{},"sourceType":"module"}