{"ast":null,"code":"import _classCallCheck from \"C:/Users/AdMin/Desktop/frontend/pferouandi/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/AdMin/Desktop/frontend/pferouandi/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/AdMin/Desktop/frontend/pferouandi/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/AdMin/Desktop/frontend/pferouandi/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/AdMin/Desktop/frontend/pferouandi/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/AdMin/Desktop/frontend/pferouandi/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nvar DEFAULT_WEBSOCKET_CONFIG = {\n  url: '',\n  deserializer: function deserializer(e) {\n    return JSON.parse(e.data);\n  },\n  serializer: function serializer(value) {\n    return JSON.stringify(value);\n  }\n};\nvar WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nexport var WebSocketSubject = /*#__PURE__*/function (_AnonymousSubject) {\n  _inherits(WebSocketSubject, _AnonymousSubject);\n\n  var _super = _createSuper(WebSocketSubject);\n\n  function WebSocketSubject(urlConfigOrSource, destination) {\n    var _this;\n\n    _classCallCheck(this, WebSocketSubject);\n\n    _this = _super.call(this);\n\n    if (urlConfigOrSource instanceof Observable) {\n      _this.destination = destination;\n      _this.source = urlConfigOrSource;\n    } else {\n      var config = _this._config = Object.assign({}, DEFAULT_WEBSOCKET_CONFIG);\n      _this._output = new Subject();\n\n      if (typeof urlConfigOrSource === 'string') {\n        config.url = urlConfigOrSource;\n      } else {\n        for (var key in urlConfigOrSource) {\n          if (urlConfigOrSource.hasOwnProperty(key)) {\n            config[key] = urlConfigOrSource[key];\n          }\n        }\n      }\n\n      if (!config.WebSocketCtor && WebSocket) {\n        config.WebSocketCtor = WebSocket;\n      } else if (!config.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n\n      _this.destination = new ReplaySubject();\n    }\n\n    return _this;\n  }\n\n  _createClass(WebSocketSubject, [{\n    key: \"lift\",\n    value: function lift(operator) {\n      var sock = new WebSocketSubject(this._config, this.destination);\n      sock.operator = operator;\n      sock.source = this;\n      return sock;\n    }\n  }, {\n    key: \"_resetState\",\n    value: function _resetState() {\n      this._socket = null;\n\n      if (!this.source) {\n        this.destination = new ReplaySubject();\n      }\n\n      this._output = new Subject();\n    }\n  }, {\n    key: \"multiplex\",\n    value: function multiplex(subMsg, unsubMsg, messageFilter) {\n      var self = this;\n      return new Observable(function (observer) {\n        try {\n          self.next(subMsg());\n        } catch (err) {\n          observer.error(err);\n        }\n\n        var subscription = self.subscribe(function (x) {\n          try {\n            if (messageFilter(x)) {\n              observer.next(x);\n            }\n          } catch (err) {\n            observer.error(err);\n          }\n        }, function (err) {\n          return observer.error(err);\n        }, function () {\n          return observer.complete();\n        });\n        return function () {\n          try {\n            self.next(unsubMsg());\n          } catch (err) {\n            observer.error(err);\n          }\n\n          subscription.unsubscribe();\n        };\n      });\n    }\n  }, {\n    key: \"_connectSocket\",\n    value: function _connectSocket() {\n      var _this2 = this;\n\n      var _this$_config = this._config,\n          WebSocketCtor = _this$_config.WebSocketCtor,\n          protocol = _this$_config.protocol,\n          url = _this$_config.url,\n          binaryType = _this$_config.binaryType;\n      var observer = this._output;\n      var socket = null;\n\n      try {\n        socket = protocol ? new WebSocketCtor(url, protocol) : new WebSocketCtor(url);\n        this._socket = socket;\n\n        if (binaryType) {\n          this._socket.binaryType = binaryType;\n        }\n      } catch (e) {\n        observer.error(e);\n        return;\n      }\n\n      var subscription = new Subscription(function () {\n        _this2._socket = null;\n\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n      });\n\n      socket.onopen = function (e) {\n        var _socket = _this2._socket;\n\n        if (!_socket) {\n          socket.close();\n\n          _this2._resetState();\n\n          return;\n        }\n\n        var openObserver = _this2._config.openObserver;\n\n        if (openObserver) {\n          openObserver.next(e);\n        }\n\n        var queue = _this2.destination;\n        _this2.destination = Subscriber.create(function (x) {\n          if (socket.readyState === 1) {\n            try {\n              var serializer = _this2._config.serializer;\n              socket.send(serializer(x));\n            } catch (e) {\n              _this2.destination.error(e);\n            }\n          }\n        }, function (e) {\n          var closingObserver = _this2._config.closingObserver;\n\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n          }\n\n          _this2._resetState();\n        }, function () {\n          var closingObserver = _this2._config.closingObserver;\n\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n\n          socket.close();\n\n          _this2._resetState();\n        });\n\n        if (queue && queue instanceof ReplaySubject) {\n          subscription.add(queue.subscribe(_this2.destination));\n        }\n      };\n\n      socket.onerror = function (e) {\n        _this2._resetState();\n\n        observer.error(e);\n      };\n\n      socket.onclose = function (e) {\n        _this2._resetState();\n\n        var closeObserver = _this2._config.closeObserver;\n\n        if (closeObserver) {\n          closeObserver.next(e);\n        }\n\n        if (e.wasClean) {\n          observer.complete();\n        } else {\n          observer.error(e);\n        }\n      };\n\n      socket.onmessage = function (e) {\n        try {\n          var deserializer = _this2._config.deserializer;\n          observer.next(deserializer(e));\n        } catch (err) {\n          observer.error(err);\n        }\n      };\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      var _this3 = this;\n\n      var source = this.source;\n\n      if (source) {\n        return source.subscribe(subscriber);\n      }\n\n      if (!this._socket) {\n        this._connectSocket();\n      }\n\n      this._output.subscribe(subscriber);\n\n      subscriber.add(function () {\n        var _socket = _this3._socket;\n\n        if (_this3._output.observers.length === 0) {\n          if (_socket && _socket.readyState === 1) {\n            _socket.close();\n          }\n\n          _this3._resetState();\n        }\n      });\n      return subscriber;\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var _socket = this._socket;\n\n      if (_socket && _socket.readyState === 1) {\n        _socket.close();\n      }\n\n      this._resetState();\n\n      _get(_getPrototypeOf(WebSocketSubject.prototype), \"unsubscribe\", this).call(this);\n    }\n  }]);\n\n  return WebSocketSubject;\n}(AnonymousSubject); //# sourceMappingURL=WebSocketSubject.js.map","map":{"version":3,"sources":["C:/Users/AdMin/Desktop/frontend/pferouandi/node_modules/rxjs/_esm2015/internal/observable/dom/WebSocketSubject.js"],"names":["Subject","AnonymousSubject","Subscriber","Observable","Subscription","ReplaySubject","DEFAULT_WEBSOCKET_CONFIG","url","deserializer","e","JSON","parse","data","serializer","value","stringify","WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT","WebSocketSubject","urlConfigOrSource","destination","source","config","_config","Object","assign","_output","key","hasOwnProperty","WebSocketCtor","WebSocket","Error","operator","sock","_socket","subMsg","unsubMsg","messageFilter","self","observer","next","err","error","subscription","subscribe","x","complete","unsubscribe","protocol","binaryType","socket","readyState","close","onopen","_resetState","openObserver","queue","create","send","closingObserver","undefined","code","reason","TypeError","add","onerror","onclose","closeObserver","wasClean","onmessage","subscriber","_connectSocket","observers","length"],"mappings":"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","sourcesContent":["import {Subject, AnonymousSubject} from '../../Subject';\r\nimport {Subscriber} from '../../Subscriber';\r\nimport {Observable} from '../../Observable';\r\nimport {Subscription} from '../../Subscription';\r\nimport {ReplaySubject} from '../../ReplaySubject';\r\n\r\nconst DEFAULT_WEBSOCKET_CONFIG = {\r\n    url: '',\r\n    deserializer: (e) => JSON.parse(e.data),\r\n    serializer: (value) => JSON.stringify(value),\r\n};\r\nconst WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\r\n\r\nexport class WebSocketSubject extends AnonymousSubject {\r\n    constructor(urlConfigOrSource, destination) {\r\n        super();\r\n        if (urlConfigOrSource instanceof Observable) {\r\n            this.destination = destination;\r\n            this.source = urlConfigOrSource;\r\n        } else {\r\n            const config = this._config = Object.assign({}, DEFAULT_WEBSOCKET_CONFIG);\r\n            this._output = new Subject();\r\n            if (typeof urlConfigOrSource === 'string') {\r\n                config.url = urlConfigOrSource;\r\n            } else {\r\n                for (let key in urlConfigOrSource) {\r\n                    if (urlConfigOrSource.hasOwnProperty(key)) {\r\n                        config[key] = urlConfigOrSource[key];\r\n                    }\r\n                }\r\n            }\r\n            if (!config.WebSocketCtor && WebSocket) {\r\n                config.WebSocketCtor = WebSocket;\r\n            } else if (!config.WebSocketCtor) {\r\n                throw new Error('no WebSocket constructor can be found');\r\n            }\r\n            this.destination = new ReplaySubject();\r\n        }\r\n    }\r\n\r\n    lift(operator) {\r\n        const sock = new WebSocketSubject(this._config, this.destination);\r\n        sock.operator = operator;\r\n        sock.source = this;\r\n        return sock;\r\n    }\r\n\r\n    _resetState() {\r\n        this._socket = null;\r\n        if (!this.source) {\r\n            this.destination = new ReplaySubject();\r\n        }\r\n        this._output = new Subject();\r\n    }\r\n\r\n    multiplex(subMsg, unsubMsg, messageFilter) {\r\n        const self = this;\r\n        return new Observable((observer) => {\r\n            try {\r\n                self.next(subMsg());\r\n            } catch (err) {\r\n                observer.error(err);\r\n            }\r\n            const subscription = self.subscribe(x => {\r\n                try {\r\n                    if (messageFilter(x)) {\r\n                        observer.next(x);\r\n                    }\r\n                } catch (err) {\r\n                    observer.error(err);\r\n                }\r\n            }, err => observer.error(err), () => observer.complete());\r\n            return () => {\r\n                try {\r\n                    self.next(unsubMsg());\r\n                } catch (err) {\r\n                    observer.error(err);\r\n                }\r\n                subscription.unsubscribe();\r\n            };\r\n        });\r\n    }\r\n\r\n    _connectSocket() {\r\n        const {WebSocketCtor, protocol, url, binaryType} = this._config;\r\n        const observer = this._output;\r\n        let socket = null;\r\n        try {\r\n            socket = protocol ?\r\n                new WebSocketCtor(url, protocol) :\r\n                new WebSocketCtor(url);\r\n            this._socket = socket;\r\n            if (binaryType) {\r\n                this._socket.binaryType = binaryType;\r\n            }\r\n        } catch (e) {\r\n            observer.error(e);\r\n            return;\r\n        }\r\n        const subscription = new Subscription(() => {\r\n            this._socket = null;\r\n            if (socket && socket.readyState === 1) {\r\n                socket.close();\r\n            }\r\n        });\r\n        socket.onopen = (e) => {\r\n            const {_socket} = this;\r\n            if (!_socket) {\r\n                socket.close();\r\n                this._resetState();\r\n                return;\r\n            }\r\n            const {openObserver} = this._config;\r\n            if (openObserver) {\r\n                openObserver.next(e);\r\n            }\r\n            const queue = this.destination;\r\n            this.destination = Subscriber.create((x) => {\r\n                if (socket.readyState === 1) {\r\n                    try {\r\n                        const {serializer} = this._config;\r\n                        socket.send(serializer(x));\r\n                    } catch (e) {\r\n                        this.destination.error(e);\r\n                    }\r\n                }\r\n            }, (e) => {\r\n                const {closingObserver} = this._config;\r\n                if (closingObserver) {\r\n                    closingObserver.next(undefined);\r\n                }\r\n                if (e && e.code) {\r\n                    socket.close(e.code, e.reason);\r\n                } else {\r\n                    observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\r\n                }\r\n                this._resetState();\r\n            }, () => {\r\n                const {closingObserver} = this._config;\r\n                if (closingObserver) {\r\n                    closingObserver.next(undefined);\r\n                }\r\n                socket.close();\r\n                this._resetState();\r\n            });\r\n            if (queue && queue instanceof ReplaySubject) {\r\n                subscription.add(queue.subscribe(this.destination));\r\n            }\r\n        };\r\n        socket.onerror = (e) => {\r\n            this._resetState();\r\n            observer.error(e);\r\n        };\r\n        socket.onclose = (e) => {\r\n            this._resetState();\r\n            const {closeObserver} = this._config;\r\n            if (closeObserver) {\r\n                closeObserver.next(e);\r\n            }\r\n            if (e.wasClean) {\r\n                observer.complete();\r\n            } else {\r\n                observer.error(e);\r\n            }\r\n        };\r\n        socket.onmessage = (e) => {\r\n            try {\r\n                const {deserializer} = this._config;\r\n                observer.next(deserializer(e));\r\n            } catch (err) {\r\n                observer.error(err);\r\n            }\r\n        };\r\n    }\r\n\r\n    _subscribe(subscriber) {\r\n        const {source} = this;\r\n        if (source) {\r\n            return source.subscribe(subscriber);\r\n        }\r\n        if (!this._socket) {\r\n            this._connectSocket();\r\n        }\r\n        this._output.subscribe(subscriber);\r\n        subscriber.add(() => {\r\n            const {_socket} = this;\r\n            if (this._output.observers.length === 0) {\r\n                if (_socket && _socket.readyState === 1) {\r\n                    _socket.close();\r\n                }\r\n                this._resetState();\r\n            }\r\n        });\r\n        return subscriber;\r\n    }\r\n\r\n    unsubscribe() {\r\n        const {_socket} = this;\r\n        if (_socket && _socket.readyState === 1) {\r\n            _socket.close();\r\n        }\r\n        this._resetState();\r\n        super.unsubscribe();\r\n    }\r\n}\r\n\r\n//# sourceMappingURL=WebSocketSubject.js.map\r\n"]},"metadata":{},"sourceType":"module"}